{"ast":null,"code":"import React,{useState}from'react';import{useSelector,useDispatch}from'react-redux';import{increment,decrement}from'../redux/actions';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Counter2=()=>{const count2=useSelector(state=>state);const dispatch=useDispatch();const[showExplanation,setShowExplanation]=useState(false);const toggleExplanation=()=>{setShowExplanation(!showExplanation);};return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Secondary Counter Component\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Count: \",count2]}),/*#__PURE__*/_jsx(\"button\",{className:\"increment\",onClick:()=>dispatch(increment()),children:\"Increment\"}),/*#__PURE__*/_jsx(\"button\",{className:\"decrement\",onClick:()=>dispatch(decrement()),children:\"Decrement\"}),/*#__PURE__*/_jsx(\"button\",{className:\"explanation\",onClick:toggleExplanation,children:\"Code Explanation\"}),showExplanation&&/*#__PURE__*/_jsxs(\"div\",{className:\"explanation-text\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Step-by-Step Explanation\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This React Redux Counter App works as follows:\"}),/*#__PURE__*/_jsxs(\"ol\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"**Project Structure**: The project is structured with components, redux, and other necessary files.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"**Redux Store**: The store is set up with actions, reducers, and the store configuration.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"**Connecting Redux to React**: The `Provider` component makes the Redux store available to the entire app.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"**Main App Component**: The `App` component renders the `Counter` and `Counter2` components.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"**Counter Components**: These components use `useSelector` to access the state and `useDispatch` to dispatch actions.\"}),/*#__PURE__*/_jsx(\"li\",{children:\"**State Updates**: The state is updated through actions and reducers, and the UI reflects these changes.\"})]})]})]});};export default Counter2;","map":{"version":3,"names":["React","useState","useSelector","useDispatch","increment","decrement","jsx","_jsx","jsxs","_jsxs","Counter2","count2","state","dispatch","showExplanation","setShowExplanation","toggleExplanation","className","children","onClick"],"sources":["/Users/hectoraltamira/redux-counter/my-react-redux-app/src/components/Counter2.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment, decrement } from '../redux/actions';\n\nconst Counter2 = () => {\n    const count2 = useSelector(state => state);\n    const dispatch = useDispatch();\n    const [showExplanation, setShowExplanation] = useState(false);\n\n    const toggleExplanation = () => {\n        setShowExplanation(!showExplanation);\n    };\n\n    return (\n        <div className=\"container\">\n            <h1>Secondary Counter Component</h1>\n            <p>Count: {count2}</p>\n            <button className=\"increment\" onClick={() => dispatch(increment())}>Increment</button>\n            <button className=\"decrement\" onClick={() => dispatch(decrement())}>Decrement</button>\n            <button className=\"explanation\" onClick={toggleExplanation}>Code Explanation</button>\n            {showExplanation && (\n                <div className=\"explanation-text\">\n                    <h2>Step-by-Step Explanation</h2>\n                    <p>This React Redux Counter App works as follows:</p>\n                    <ol>\n                        <li>**Project Structure**: The project is structured with components, redux, and other necessary files.</li>\n                        <li>**Redux Store**: The store is set up with actions, reducers, and the store configuration.</li>\n                        <li>**Connecting Redux to React**: The `Provider` component makes the Redux store available to the entire app.</li>\n                        <li>**Main App Component**: The `App` component renders the `Counter` and `Counter2` components.</li>\n                        <li>**Counter Components**: These components use `useSelector` to access the state and `useDispatch` to dispatch actions.</li>\n                        <li>**State Updates**: The state is updated through actions and reducers, and the UI reflects these changes.</li>\n                    </ol>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Counter2;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,SAAS,CAAEC,SAAS,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAExD,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACnB,KAAM,CAAAC,MAAM,CAAGT,WAAW,CAACU,KAAK,EAAIA,KAAK,CAAC,CAC1C,KAAM,CAAAC,QAAQ,CAAGV,WAAW,CAAC,CAAC,CAC9B,KAAM,CAACW,eAAe,CAAEC,kBAAkB,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAE7D,KAAM,CAAAe,iBAAiB,CAAGA,CAAA,GAAM,CAC5BD,kBAAkB,CAAC,CAACD,eAAe,CAAC,CACxC,CAAC,CAED,mBACIL,KAAA,QAAKQ,SAAS,CAAC,WAAW,CAAAC,QAAA,eACtBX,IAAA,OAAAW,QAAA,CAAI,6BAA2B,CAAI,CAAC,cACpCT,KAAA,MAAAS,QAAA,EAAG,SAAO,CAACP,MAAM,EAAI,CAAC,cACtBJ,IAAA,WAAQU,SAAS,CAAC,WAAW,CAACE,OAAO,CAAEA,CAAA,GAAMN,QAAQ,CAACT,SAAS,CAAC,CAAC,CAAE,CAAAc,QAAA,CAAC,WAAS,CAAQ,CAAC,cACtFX,IAAA,WAAQU,SAAS,CAAC,WAAW,CAACE,OAAO,CAAEA,CAAA,GAAMN,QAAQ,CAACR,SAAS,CAAC,CAAC,CAAE,CAAAa,QAAA,CAAC,WAAS,CAAQ,CAAC,cACtFX,IAAA,WAAQU,SAAS,CAAC,aAAa,CAACE,OAAO,CAAEH,iBAAkB,CAAAE,QAAA,CAAC,kBAAgB,CAAQ,CAAC,CACpFJ,eAAe,eACZL,KAAA,QAAKQ,SAAS,CAAC,kBAAkB,CAAAC,QAAA,eAC7BX,IAAA,OAAAW,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjCX,IAAA,MAAAW,QAAA,CAAG,gDAA8C,CAAG,CAAC,cACrDT,KAAA,OAAAS,QAAA,eACIX,IAAA,OAAAW,QAAA,CAAI,qGAAmG,CAAI,CAAC,cAC5GX,IAAA,OAAAW,QAAA,CAAI,2FAAyF,CAAI,CAAC,cAClGX,IAAA,OAAAW,QAAA,CAAI,4GAA0G,CAAI,CAAC,cACnHX,IAAA,OAAAW,QAAA,CAAI,8FAA4F,CAAI,CAAC,cACrGX,IAAA,OAAAW,QAAA,CAAI,uHAAqH,CAAI,CAAC,cAC9HX,IAAA,OAAAW,QAAA,CAAI,0GAAwG,CAAI,CAAC,EACjH,CAAC,EACJ,CACR,EACA,CAAC,CAEd,CAAC,CAED,cAAe,CAAAR,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}